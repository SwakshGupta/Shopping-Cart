The number of schemas you need in your application depends on the complexity of your data model and the relationships between different entities in your system. Generally, in a MERN (MongoDB, Express.js, React, Node.js) stack application, you might need multiple schemas to represent different types of data and their relationships. Here's a breakdown of typical schemas you might need and why you need them:

1. **User Schema**:
   - This schema represents user data such as username, email, password (hashed), profile information, etc.
   - It's essential for user authentication, authorization, and managing user-related data.

2. **Product Schema**:
   - This schema represents product data such as name, price, description, image URL, etc.
   - It's necessary for managing product inventory, displaying product information, and handling product-related operations.

3. **Cart Schema**:
   - This schema represents cart data, including the items in the cart, their quantities, total price, and the associated user (if implementing a user-specific cart).
   - It's crucial for managing shopping carts, storing temporary user selections, and processing checkout operations.

4. **Order Schema**:
   - This schema represents order data, including the items ordered, quantities, total price, shipping address, order status, etc.
   - It's necessary for managing orders placed by users, tracking order history, and processing order fulfillment.

5. **Category Schema**:
   - This schema represents product categories or tags to classify products.
   - It's useful for organizing products, implementing product filtering and search functionalities.

6. **Review Schema**:
   - This schema represents user reviews/ratings associated with products.
   - It's helpful for collecting feedback from users, displaying product ratings, and enhancing user experience.

7. **Payment Schema**:
   - This schema represents payment-related data, including payment method, transaction details, payment status, etc.
   - It's necessary for processing payments, handling transactions securely, and ensuring payment integrity.

These are just some examples of schemas you might need in a typical e-commerce application. Depending on your application requirements, you might need additional schemas or variations of the above schemas to represent your data effectively and support various features and functionalities.